@{
    ViewData["Title"] = "Register";
    Layout = "~/Views/Layout/LayoutAdmin.cshtml";
}

<h4 style="color: #624DE3;">Create Account Employee <i class="fas fa-users"></i></h4>
<div class="card mb-5 border-left-primary shadow">
    <div class="card-body">
        <form class="user" method="post" id="createAccountForm">
            <div class="form-group row ">
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <label class="text-dark" for="exampleInputEmail1">Full Name</label>
                    <input type="text" class="form-control" oninput=" handleInput(event, this);" onpaste="handleInput(event, this); " id="fullName" name="fullName" required>
                    <span class="error-message" id="validateName" style="color: red; display: none;">The field can only use letters.</span>
                </div>
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <label class="text-dark" for="nik">Nomor Induk Karyawan</label>
                    <input type="number" class="form-control" maxlength="6" onkeyup="javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);"
                           oninput=" handleInput(event, this);" onpaste="handleInput(event, this); " id="nik" name="nik" required>
                    <span class="error-message" id="validateNIK" style="color: red; display: none;">Please Input Max 6 Digit Number</span>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <label class="text-dark" for="exampleInputEmail1">Email</label>
                    <input type="email" class="form-control " id="email" name="email" required>
                    <span class="error-message" id="validateEmail" style="color: red; display: none;">The field must use the email domain @@berca.co.id.</span>
                </div>

                <div class="col-sm">
                    <label class="text-dark" for="exampleInputEmail1">Gender</label>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="male" name="gender" value="Male" required>Male
                        <label class="form-check-label" for="radio1"></label>
                    </div>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="radio2" name="gender" value="Female" required>Female
                        <label class="form-check-label" for="radio2"></label>
                    </div>
                </div>
                <div class="col-sm">
                    <label class="text-dark" for="exampleInputEmail1">Status Hiring</label>
                    <div class="form-check">
                        <input type="radio" class="form-check-input" id="prohire" name="hiredStatus" value="Prohire" required>Prohire
                        <label class="form-check-label" for="radio1"></label>
                    </div>
                    <div class="form-check" id="batch">
                        <input type="radio" class="form-check-input" id="bootcamp" name="hiredStatus" value="Bootcamp" required>Bootcamp
                        <label class="form-check-label" for="radio2"></label>
                    </div>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <label class="text-dark" for="exampleInputEmail1">Position</label>
                    @* <input type="text" class="form-control " id="position" name="position" required>*@
                    @*<div class="form-check">*@
                    <select id="positionAcc" class="positionAcc form-control" name="state" required>
                         <option selected disabled>Select position</option>
                        <option value="Back End Developer">Back End Developer</option>
                        <option value="Business Analyst">Business Analyst</option>
                        <option value="Business Intelligent Engineer">Business Intelligent Engineer</option>
                        <option value="Data Analyst">Data Analyst</option>
                        <option value="Data Engineer">Data Engineer</option>
                        <option value="Database Administrator">Database Administrator</option>
                        <option value="Database Analyst">Database Analyst</option>
                        <option value="Database Engineer">Database Engineer</option>
                        <option value="Devops Engineer">Devops Engineer</option>
                        <option value="Developer">Developer</option>
                        <option value="Front End Developer">Front End Developer</option>
                        <option value="Head of IT">Head of IT</option>
                        <option value="IT Admin">IT Admin</option>
                        <option value="IT Applications Support">IT Applications Support</option>
                        <option value="Manager">Manager</option>
                        <option value="Mobile Developer">Mobile Developer</option>
                        <option value="Outsystems Developer">Outsystems Developer</option>
                        <option value="Project Manager">Project Manager</option>
                        <option value="Quality Assurance">Quality Assurance</option>
                        <option value="Sage 300 Consultant">Sage 300 Consultant</option>
                        <option value="SAP ABAP Developer">SAP ABAP Developer</option>
                        <option value="Scrum Master">Scrum Master</option>
                        <option value="Software Engineer">Software Engineer</option>
                        <option value="System Analyst">System Analyst</option>
                        <option value="UiPath Engineer">UiPath Engineer</option>
                        <option value=".Net Developer">.Net Developer</option>
                    </select>
                    <span class="error-message" style="color: red; display: none;">Please select at least one Position.</span>
                    @*</p>*@
                    @*</div>*@
                </div>

                <div class="col-sm-3">
                    <label class="text-dark" for="exampleInputEmail1">Level</label>
                    @*<div class="form-check">*@
                        <select id="levelAcc" class="selectLevel form-control" name="state" required>
                            <option selected disabled>Select level</option>
                            <option value="Fresh Graduate">Fresh Graduate</option>
                            <option value="Junior">Junior</option>
                            <option value="Junior to Middle">Junior to Middle</option>
                            <option value="Middle">Middle</option>
                            <option value="Middle to Senior">Middle to Senior</option>
                            <option value="Senior">Senior</option>
                        </select>
                    <span class="error-message" style="color: red; display: none;">This field is required!</span>
                    @*</div>*@
                </div>
            
                <div class="col-sm-3">
                <label class="text-dark" for="exampleInputEmail1">Financial Industry</label>
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="financialAcc" name="financialAcc" value="True">
                        <span class="status-indicator-acc" style="font-size: smaller">No</span>
                    </div>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <label class="text-dark" for="exampleInputEmail1">Join Date</label>
                    <input type="date" class="form-control " id="join" name="join" required>
                    <span class="error-message" style="color: red; display: none;">Field is required.</span>
                </div>
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <label class="text-dark" for="duration">Contract Duration</label>
                    <div class="input-group">
                        <input type="number" class="form-control " id="duration" onkeyup="SetEndContract(this.value);" name="duration" required>
                        <div class="input-group-append">
                            <span class="input-group-text">Month</span>
                        </div>
                    </div>
                    <span class="error-message" style="color: red; display: none;">Field is required.</span>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <label class="text-dark" for="exampleInputEmail1">Start Contract</label>
                    <input type="date" class="form-control " id="start" name="start" required>
                    <span class="error-message" style="color: red; display: none;">Field is required.</span>
                </div>
                <div class="col-sm-6">
                    <label class="text-dark" for="exampleInputEmail1">End Contract</label>
                    <input type="date" class="form-control " id="end" name="end">
                    <span class="error-message" style="color: red; display: none;">Field is required.</span>
                </div>
            </div>

            <div class="form-group">
                <input type="hidden" class="form-control " id="roleId" name="roleId" value="3">
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>


    </div>
</div>


<script>

    $(document).ready(function () {
        $('input[required]').each(function () {
            $(this).prev('label').append('<span style="color: red;">*</span>');
            $(this).closest('.form-check').prev('label').append('<span style="color: red;">*</span>');
            $(this).closest('.input-group').prev('label').append('<span style="color: red;">*</span>');
        });
        $('select[required]').each(function () {
            $(this).prev('label').append('<span style="color: red;">*</span>');
        });
    })

    document.getElementById('prohire').addEventListener('click', function () {
        $('#duration').val('');
        $('#join').val('');
        $('#start').val('');
        $('#end').val('');
        $('#levelAcc').val('Select level');
        $("#financialAcc").prop("checked", false);
        var financial2 = document.getElementById('financialAcc');
        var statusIndicator2 = document.querySelector('.status-indicator-acc');
        if (statusIndicator2) {
            statusIndicator2.textContent = financial2 ? "No" : "Yes";
        }
    });

    document.getElementById('bootcamp').addEventListener('click', function () {
        var startContract = new Date();
        let endContract = new Date(startContract);
        endContract.setDate(1);
        endContract.setMonth(endContract.getMonth() + 3);


        const yyyy = endContract.getFullYear();
        let mm = endContract.getMonth() + 1;
        if (mm < 10) mm = '0' + mm;
        let lastDay = new Date(yyyy, mm, 0);
        
        //// add function automate financial and level
        var financialCheck = document.getElementById('financialAcc');
        //const statusIndicatorAc = document.querySelector(".status-indicator-acc");
        financialCheck.checked = "True";

        var statusIndicatorbot = document.querySelector('.status-indicator-acc');
        if (statusIndicatorbot) {
            statusIndicatorbot.textContent = financialCheck ? "Yes" : "No";
        }

        var StatusDropdown = document.getElementById("levelAcc");
        StatusDropdown.value = "Junior"; 

        const endContractForm = yyyy + '-' + mm + '-' + lastDay.getDate();
        document.getElementById('duration').removeAttribute('disabled');
        $('#duration').val(3);
        $('#join').val(startContract.toISOString().slice(0, 10));
        $('#start').val(startContract.toISOString().slice(0, 10));
        $('#end').val(endContractForm);

        $('#financialAcc').val(financialCheck);
        $('#financialAcc').val(StatusDropdown);
    });

    document.getElementById('start').addEventListener('change', function () {
        $('#join').val(this.value);

        document.getElementById('duration').removeAttribute('disabled');
        if ($('#duration').val() != '') {
            var startContract = new Date($('#join').val());
            let endContract = new Date(startContract);


            endContract.setMonth(endContract.getMonth() + parseInt($('#duration').val()));

            const yyyy = endContract.getFullYear();
            let mm = endContract.getMonth() + 1;
            if (mm < 10) mm = '0' + mm;
            let lastDay = new Date(yyyy, mm, 0);

            const endContractForm = yyyy + '-' + mm + '-' + lastDay.getDate();
            $('#end').val(endContractForm);
        }
    });

    function SetEndContract(duration) {
        var startContract = new Date($('#join').val());
        let endContract = new Date(startContract);
        endContract.setMonth(endContract.getMonth() + parseInt(duration));

        const yyyy = endContract.getFullYear();
        let mm = endContract.getMonth() + 1;
        if (mm < 10) mm = '0' + mm;
        let lastDay = new Date(yyyy, mm, 0);

        const endContractForm = yyyy + '-' + mm + '-' + lastDay.getDate();
        $('#end').val(endContractForm);
    };

    // function financial industry
    document.getElementById('financialAcc').addEventListener('change', function () {
        // Get the value of the checkbox
        var financialIndustryValue = this.checked;

        var statusIndicatorAcc = document.querySelector('.status-indicator-acc');
        if (statusIndicatorAcc) {
            statusIndicatorAcc.textContent = financialIndustryValue ? "Yes" : "No";
        }
        
    });

    
    var financial = $("#financialAcc").is(":checked");
    if (!financial) {
        financial = "False";
    } else {
        financial = "True";
    }
    //financial = financial.tostring();

    //function position
    $(".positionAcc").select2({
        placeholder: "Select position",
        tags: true,
    });


    document.getElementById('createAccountForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Mencegah pengiriman formulir secara default

        // Mengambil nilai input dari formulir
        var accountId = "";
        var fullName = document.getElementById('fullName').value;
        var nik = document.getElementById('nik').value;
        var email = document.getElementById('email').value;
        var startContract = document.getElementById('start').value;
        var endContract = document.getElementById('end').value;
        var joinDate = document.getElementById('join').value;
        var gender = document.querySelector('input[name="gender"]:checked').value;
        
        // Validate selected positions
        var selectedPositions = $("#positionAcc").val().join(", ");
        //if (selectedPositions.length === 0) {
        //    $('#positionError').show();
        //    return;
        //} else {
        //    $('#positionError').hide();
        //}
        console.log(selectedPositions);

        var roleId = document.getElementById('roleId').value;
        var hiredStatus = document.querySelector('input[name="hiredStatus"]:checked').value;
        var level = document.getElementById('levelAcc').value;
        var financialIndustryAcc = financial;
        // ...
        // Melakukan validasi repeat password
        //if (password !== repeatPassword) {
        // Password dan repeat password tidak sama, tampilkan pesan error
        //alert('Password and Repeat Password do not match.');
        // return; // Hentikan eksekusi lebih lanjut
        // }
        // Menggabungkan data input menjadi objek yang akan dikirim ke API

        // Generate a random UUID

        //Validasi Nama
        if (!validateName) {
            $('#fullName').focus();
            return;
        }
        if (!validateNIK) {
            $('#nik').focus();
            return;
        }
        if (!validateEmail) {
            $('#email').focus();
            return;
        }

        const password = uuidv4();

        // Print the UUID
        var data = {
            accountId: accountId,
            email: email.toLowerCase(),
            password: password,
            nik: nik,
            fullname: capitalizeName(fullName),
            //birthplace: 'string',
            //birthdate: '2023-06-23T07:21:40.243Z',
            //religion: 'string',
            gender: gender,
            position: selectedPositions,
            startContract: startContract,
            endContract: endContract,
            joinDate: joinDate,
            roleId: roleId,
            hiredstatus: hiredStatus,
            level: level,
            financialIndustry: financialIndustryAcc
        };


        // Mengirim data ke API menggunakan Fetch API
        fetch('https://localhost:7177/api/Accounts/Register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': "Bearer " + sessionStorage.getItem("Token"),
            },
            body: JSON.stringify(data)
        })
            .then(function (response) {
                if (response.ok) {
                    if (hiredStatus == 'Bootcamp') {
                        response.json().then(function (item) {
                            //Add Data Template
                            var NonFormal = new Object(); //bikin objek baru
                            NonFormal.Name = "C# Training";
                            NonFormal.Organizer = "PT. Berca Hardayaperkasa";
                            NonFormal.Years = new Date().getFullYear().toString();
                            NonFormal.Description = "SQL Server Database, C# Programming Language, Object Oriented Programming, ASP .NET Core, Pattern (MVC, MVVM, N-Layered Architecture), Web API, Code first, Database First, Entity Framework Core, Dapper, Asynchronous, Implement JWT, BCrypt, Dokumentasi API menggunakan swagger, JavaScript, Web Template (CSS, Bootstrap)";
                            NonFormal.AccountId = item.data;

                            $.ajax({
                                type: 'POST',
                                url: 'https://localhost:7177/api/NonFormalEdu',
                                data: JSON.stringify(NonFormal), //ngirim data ke api
                                contentType: "application/json; charset=utf-8",
                                headers: {
                                    "Authorization": "Bearer " + sessionStorage.getItem("Token")
                                },
                            });

                            var qualifications = new Object(); //bikin objek baru
                            qualifications.framework = ".Net Core API, .Net Core MVC, Bootstrap";
                            qualifications.programmingLanguage = "C#, Javascript, Jquery HTML & CSS, Java, Python";
                            qualifications.database = "SQL Server, MySQL";
                            qualifications.tools = "";
                            qualifications.others = "";
                            qualifications.accountId = item.data;
                            $.ajax({
                                type: 'POST',
                                url: 'https://localhost:7177/api/Qualification',
                                data: JSON.stringify(qualifications), //ngirim data ke api
                                contentType: "application/json; charset=utf-8",
                                headers: {
                                    "Authorization": "Bearer " + sessionStorage.getItem("Token")
                                },
                            });

                            var startPeriode = new Date().toISOString().slice(0, 7);
                            var now = new Date();
                            now.setMonth(now.getMonth() + 3);
                            const yyyy = now.getFullYear();
                            let mm = now.getMonth() + 1;
                            if (mm < 10) mm = "0" + mm;

                            const endPeriode = yyyy + "-" + mm;
                            var periodEmployement = startPeriode + " - " + endPeriode;


                            var EmploymentHistory = {
                                companyName: "PT. Berca Hardayaperkasa",
                                job: "Developer",
                                period: periodEmployement,
                                description: "Bootcamp program on how to develop an apps using .Net Core Framework. Learning on how to create API’s, consume API’s."
                            };
                            EmploymentHistory.AccountId = item.data;
                            //console.log(EmploymentHistory);
                            $.ajax({
                                type: 'POST',
                                url: 'https://localhost:7177/api/EmploymentHistory',
                                data: JSON.stringify(EmploymentHistory),
                                contentType: "application/json; charset=utf-8",
                                headers: {
                                    "Authorization": "Bearer " + sessionStorage.getItem("Token")
                                },
                            })
                        });
                    }
                    const activity = "Have Created an Employee Account";
                    SaveLogUpdate(activity);
                    // Redirect atau tampilkan pesan sukses jika permintaan berhasil
                    // ...
                    Swal.fire('Success', 'Registration Employee successful', 'success');
                    var form = document.getElementById('createAccountForm');
                    form.reset(); // Reset form setelah pengiriman berhasil
                    $("#positionAcc").val().

                    $.post("/Accounts/NewAccount", { email, password })
                        .done(function () {
                            const Toast = Swal.mixin({
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 2000,
                                timerProgressBar: true,
                                didOpen: (toast) => {
                                    toast.addEventListener('mouseenter', Swal.stopTimer)
                                    toast.addEventListener('mouseleave', Swal.resumeTimer)
                                }
                            })


                            Toast.fire({
                                icon: 'success',
                                title: 'Email Has ben sent',
                                text: "",

                            })

                        });

                } else {
                    // Tampilkan pesan error jika permintaan gagal
                    response.json().then(function (data) {
                        // Ambil pesan dari respons JSON
                        var errorMessage = data.errors

                        // Tampilkan pesan error menggunakan SweetAlert
                        Swal.fire('Error', errorMessage, 'error');

                    });

                }
            })
            .catch(function (error) {
                // Tangani error jika terjadi kesalahan saat mengirim permintaan
                // ...
            });
    });

    function uuidv4() {
        return 'xxxxxxxx'
            .replace(/[x]/g, function (c) {
                const r = Math.random() * 16 | 0,
                    v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
    };
    $("#email, #nik, #fullName").on("keyup", function () {
        var value = $(this).val();
        var errorMessage = "";
        var isValidCharacter = true;  // Inisialisasi dengan nilai default true

        if ($(this).is("#email")) {
            var regex = /^[a-zA-Z0-9._-]+@@berca\.co\.id$/;
            isValidCharacter = regex.test(value);
            validateEmail = regex.test(value);
            errorMessage = "Must Use Berca Email Domain";
        } else if ($(this).is("#nik")) {
            var NIKLength = value.length <= 6;
            isValidCharacter = NIKLength;
            validateNIK = NIKLength;
            errorMessage = "Max 6 Digits";
        } else if ($(this).is("#fullName")) {
            var regex = /^[a-zA-Z'-\s]+$/;

            if (regex.test(value) || value === '') {
                isValidCharacter = true;
                validateName = true;
            } else {
                isValidCharacter = false;
                validateName = false;
                errorMessage = "The field can only use letters.";
            }
        }

        if (!isValidCharacter) {
            $(this).next(".error-message").text(errorMessage).show();

        } else if (isValidCharacter) {
            $(this).next(".error-message").hide();
        }
    });

    function capitalizeName(name) {
        return name
            .toLowerCase()
            .split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
    }

    function noHTML(input) {
        var value = input.value.replace(/<[^>]*>/g, '');
        //var nohtml = value.replace(/[<>?/]/g, '');
        input.value = value
    }
    function handleInput(event, input) {
        // Menangani peristiwa oninput dan onpaste
        noHTML(input);
    }
</script>